using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
namespace mySocket
{
    class Server
    {
        //监听嵌套字
        public Socket listedfd;
        //客户端连接
        public Conn[] conns;
        //最大连接数
        public int maxConn = 50;

        public int newIndex()
        {
            if (conns == null)
            {
                return -1;
            }
            for (int i = 0; i < conns.Length; i++)
            {
                if (conns[i] == null)
                {
                    conns[i] = new Conn();
                    return i;
                }
                else if (conns[i].isUse == false)
                {
                    return i;
                }
            }
            return -1;
        }

        //开启服务器
        public void Start(string host, int port)
        {
            //连接池
            conns = new Conn[maxConn];
            for (int i = 0; i < conns.Length; i++)
            {
                conns[i] = new Conn();
            }

            //Socket
            listedfd = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);

            //bind
            IPAddress ipAr = IPAddress.Parse(host);
            IPEndPoint ipEp = new IPEndPoint(ipAr,port);

            listedfd.Bind(ipEp);
            listedfd.Listen(maxConn);

            //开启监听
            listedfd.BeginAccept(AcceptCb, null);
            Console.WriteLine("服务器启动成功");
        }
        //回调
        private void AcceptCb(IAsyncResult ar)
        {
            try
            {
                Socket socket = listedfd.EndAccept(ar);
                int index = newIndex();
                if (index < 0)
                {
                    socket.Close();
                    Console.WriteLine("连接已满");
                }
                else
                {
                    Conn conn = conns[index];
                    conn.Init(socket);
                    string adr = conn.GetAddress();
                    Console.WriteLine("有客户端连接"+adr+"ID号为"+index);
                    conn.socket.BeginReceive(conn.readBuffer,conn.buffCount,conn.buffRemain(),SocketFlags.None,ReceiveCb,conn);
                    listedfd.BeginAccept(AcceptCb, null);//再次调用循环
                }
               
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        private void ReceiveCb(IAsyncResult ar)
        {
            Conn conn = (Conn)ar.AsyncState;

            try
            {
                int count = conn.socket.EndReceive(ar);
                if (count <= 0)
                {
                    Console.WriteLine(conn.GetAddress() + "与服务器断开连接");
                    conn.Close();
                    return;
                }
                string str = Encoding.UTF8.GetString(conn.readBuffer, 0, count);
                Console.WriteLine("收到" + conn.GetAddress() + "发送过来的数据" + str);
                str = conn.GetAddress() + ":" + str;
                byte[] bytes = Encoding.UTF8.GetBytes(str);
                //广播消息
                for (int i = 0; i < conns.Length; i++)
                {
                    if (conns[i] == null) continue;
                    if (!conns[i].isUse) continue;
                    Console.WriteLine("服务器将消息转发给" + conns[i].GetAddress());
                    conns[i].socket.Send(bytes);
                }

                //继续接受数据
                conn.socket.BeginReceive(conn.readBuffer, conn.buffCount, conn.buffRemain(), SocketFlags.None, ReceiveCb, conn);

            }
            catch (Exception e)
            {
                Console.WriteLine("收到"+conn.GetAddress()+"断开连接"+e.Message);
                
                conn.Close();
            }

        }
    }
}
